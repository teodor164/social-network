{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.css","components/Login/Login.module.css","components/Users/Users.module.css","components/common/FormsControl/FormsControl.module.css","components/Profile/MyPosts/MyPosts.module.css","components/common/Pagination/Pagination.module.css","api/chatAPI.ts","redux/chatReducer.ts","components/common/Preloader/Preloader.module.css","components/Profile/ProfilePage.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.js","redux/dialogsReducer.ts","components/common/FormsControl/FormsControl.tsx","utils/validators.tsx","api/api.ts","components/Dialogs/AddMessageForm.tsx","assets/images/profile.png","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","api/authAPI.ts","api/securityAPI.ts","redux/authReducer.ts","components/Login/LoginPage.tsx","api/profileAPI.ts","redux/profileReducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/common/Preloader/Preloader.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileHeader/ProfileStatus.tsx","components/Profile/ProfileHeader/ProfileHeader.tsx","components/Profile/ProfileInfo/EditMode.tsx","assets/images/facebook.png","assets/images/github.png","assets/images/twitter.png","assets/images/instagram.png","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePage.tsx","redux/appReducer.ts","utils/object-helpers.ts","api/usersAPI.ts","redux/usersReducer.ts","redux/reduxStore.ts","hoc/LazyLoading.tsx","components/common/Pagination/Pagination.tsx","components/Users/User.tsx","redux/Selectors/usersSelectors.ts","components/Users/UserSearchForms.tsx","redux/Selectors/headerSelectors.ts","components/Header/Header.tsx","App.tsx","components/Users/Users.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","hoc/WithAuthRedirect.tsx","components/Profile/ProfileHeader/ProfileHeader.module.css"],"names":["module","exports","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChanel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","filter","message","send","initialState","messages","actions","type","payload","_newMessageHandler","newMessageHandlerCreator","dispatch","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","a","stopMessagesListening","sendChatMessage","chatReducer","state","action","map","m","id","v1","index","array","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","messagesData","dialogsData","name","img","dialogsReducer","newMessageBody","FormControl","meta","touched","children","hasErr","className","formControl","err","MyTextarea","props","input","restProps","TextArea","MyInput","createField","placeholder","component","validators","text","Field","validate","ResultCodeEnum","ResultCodeForCaptcha","required","value","maxLengthCreator","maxLength","maxLength100","reduxForm","form","onSubmit","handleSubmit","DialogItem","dialog","to","activeClassName","activeLink","item","src","alt","userPhoto","Dialogs","addMessage","dialogsElement","d","messagesElements","dialogs","dialogsItems","addBlock","compose","connect","dialogsPage","withAuthRedirect","instance","axios","create","withCredentials","headers","baseURL","authAPI","get","response","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","isFetching","captchaUrl","authMe","resultCode","success","getCaptchaUrl","url","authReducer","LoginReduxForm","formSummaryError","login__button","LoginPage","useSelector","auth","useDispatch","login__container","CaptchaIsRequired","stopSubmit","_error","userLogin","profileAPI","userId","put","photoFile","formData","FormData","append","postsData","profile","editMode","addPost","postText","deletePost","postId","setUserProfile","setStatus","savePhotoSuccess","photos","toggleEditMode","getProfileInfo","profileReducer","p","Post","itemBox","itemContent","imgBox","profileDefault","maxLength70","MyPostReduxForm","PostsForm","Preloader","loader","MyPosts","React","memo","postBlock","posts","elem","large","MyPostsForm","ProfileStatus","useState","setEditMode","useEffect","profile__status","isOwner","onClick","onChange","currentTarget","autoFocus","onBlur","updateStatus","ProfileHeader","savePhoto","profile__header__container","avatar__container","profilePhoto","style","display","target","files","profile__name","fullName","EditModeFormRedux","submit","profile__info__container","profile__contacts__container","block","EditMode","saveData","initialValues","StaticProfileData","contacts","facebook","instagram","twitter","github","aboutMe","lookingForAJobDescription","profile__info__list","profile__info__nodata","profile__contacts__list","href","facebookLogo","instagramLogo","twitterLogo","githubLogo","profile__contacts__nodata","ProfileInfo","Profile","this","match","params","authorizedUserId","getStatus","refreshProfile","prevProps","profile__page","Component","withRouter","profilePage","getState","initialized","collapsed","appReducer","updateObjectInArray","items","itemId","objPropsName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","follow","users","totalUsersCount","followingInProgress","portionSize","totalUsers","requestUsers","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","rootReducer","combineReducers","usersPage","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","LazyLoading","WrappedComponent","fallback","Pagination","totalItemsCount","onPageChanged","pagesCount","Math","ceil","before","after","styles","paginator","selectedPage","User","user","userContainer","small","disabled","some","userDescription","getUsersData","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getIsAuth","getUsersFilter","userSearchForms","values","UserSearchForm","onFilterChanged","enableReinitialize","String","isSubmitting","as","getAuthFetching","getLogin","AppHeader","LogOut","padding","span","theme","mode","altMenu","Item","altMenuItem","UserOutlined","fontSize","MessageOutlined","UsergroupDeleteOutlined","SettingOutlined","WechatOutlined","loginBlock","hiddenLoginBlock","backgroundColor","icon","nickName","SubMenu","Menu","Content","Layout","Footer","Sider","SettingsContainer","lazy","LazyChat","LazySettings","UsersPage","history","useHistory","actualPage","actualFilter","parsed","queryString","location","search","slice","page","pathname","followUser","userID","bind","unfollowUser","App","catchAllUnhandledErrors","alert","initializeApp","width","defaultOpenKeys","height","title","minHeight","exact","path","render","DialogsContainer","textAlign","AppContainer","promise","Promise","all","SamuraiJSApp","StrictMode","ReactDOM","document","getElementById","mapStateToPropsForRedirect"],"mappings":"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","file":"static/js/main.a84b46bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemBox\":\"Post_itemBox__2J8Mx\",\"itemContent\":\"Post_itemContent__qLEcN\",\"imgBox\":\"Post_imgBox__3E9VG\",\"text\":\"Post_text__1Gw6X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__container\":\"Login_login__container__1nEst\",\"login__button\":\"Login_login__button__5PWGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"Users_userContainer__VEqcy\",\"userPhoto\":\"Users_userPhoto__2YoK6\",\"userDescription\":\"Users_userDescription__1bBvz\",\"selectedPage\":\"Users_selectedPage__22Fmw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__3c4w2\",\"err\":\"FormsControl_err__A2dut\",\"formSummaryError\":\"FormsControl_formSummaryError__JSrAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__15PaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagination_selectedPage__2ynfE\",\"paginator\":\"Pagination_paginator__1DnLe\",\"pageNumber\":\"Pagination_pageNumber__1D9IR\"};","let subscribers = {\r\n    'messagesReceived': [] as MessagesReceivedSubscriberType[],\r\n    'statusChanged': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChanel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messagesReceived'].forEach(s => s(newMessages))\r\n}\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\n\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['statusChanged'].forEach(s => s(status))\r\n\r\n}\r\n\r\nfunction createChanel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChanel()\r\n    },\r\n    stop() {\r\n        subscribers[\"messagesReceived\"] = []\r\n        subscribers[\"statusChanged\"] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendChatMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype EventsNamesType = 'messagesReceived' | 'statusChanged'\r\ntype MessagesReceivedSubscriberType = (messages: MessageChatAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type MessageChatAPIType = {\r\n    userId: number\r\n    photo: string,\r\n    message: string\r\n    userName: string\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n","import {DefaultThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {chatAPI, MessageChatAPIType, StatusType} from \"../api/chatAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v1} from 'uuid'\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"socialNetwork/app/MESSAGE_RECEIVED\":\r\n            return {...state,\r\n            messages: [...state.messages, ...action.payload.message\r\n                .map(m => ({...m, id: v1()}))]\r\n                .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case \"socialNetwork/app/STATUS_CHANGED\":\r\n            return {...state,\r\n               status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (message: MessageChatAPIType[]) => ({\r\n        type: 'socialNetwork/app/MESSAGE_RECEIVED', payload: {message}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: \"socialNetwork/app/STATUS_CHANGED\", payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: MessageChatAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\n\r\nlet _statusChangedHandler: ((messages: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messagesReceived',newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('statusChanged',statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messagesReceived',newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('statusChanged',statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendChatMessage = (message: string): ThunkType => async () => {\r\n    chatAPI.sendChatMessage(message)\r\n}\r\n\r\nexport default chatReducer\r\n\r\ntype ChatMessageType = MessageChatAPIType & {id: string}\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionTypes<typeof actions>\r\ntype ThunkType = DefaultThunkType<ActionsType>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__lWjDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile__page\":\"ProfilePage_profile__page__3ESaw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile__info__container\":\"ProfileInfo_profile__info__container__yvTWI\",\"profile__contacts__container\":\"ProfileInfo_profile__contacts__container__3iUYZ\",\"profile__info__list\":\"ProfileInfo_profile__info__list__49fgH\",\"profile__contacts__list\":\"ProfileInfo_profile__contacts__list__1p1FX\",\"profile__contacts__nodata\":\"ProfileInfo_profile__contacts__nodata__ogzFG\",\"profile__info__nodata\":\"ProfileInfo_profile__info__nodata__RTgHY\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {DialogType, MessagesType} from \"../types/types\";\r\nimport {InferActionTypes} from \"./reduxStore\";\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: '42'},\r\n    ] as Array<MessagesType>,\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Dima',\r\n            img: 'https://meragor.com/files/styles//ava_800_800_wm/standoff_162.jpg',\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Andrey',\r\n            img: 'https://avatars.mds.yandex.net/get-zen_doc/3512693/pub_5efb3ff066fe1d5006536937_5efb4be4cdd4d637ce0fd2e8/scale_1200',\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Maxim',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTn8H3mqnU943_lgdPtj-JIGRjyKAlp3FSLzg&usqp=CAU',\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Ghena',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSx5wghphVB-NTZeDHzsjPFUGY2_V-yPNnq1g&usqp=CAU',\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Renat',\r\n            img: 'http://pristor.ru/wp-content/uploads/2019/01/%D0%A8%D0%B8%D0%BA%D0%B0%D1%80%D0%BD%D1%8B%D0%B5-%D0%B0%D0%B2%D0%B0%D1%82%D0%B0%D1%80%D0%BA%D0%B8-%D0%B4%D0%BB%D1%8F-%D0%92%D0%9A%D0%BE%D0%BD%D1%82%D0%B0%D0%BA%D1%82%D0%B5-%D0%B4%D0%B5%D0%B2%D1%83%D1%88%D0%BA%D0%B0%D0%BC-%D0%B8-%D0%B4%D0%B5%D0%B2%D0%BE%D1%87%D0%BA%D0%B0%D0%BC-%D0%BF%D0%BE%D0%B4%D0%B1%D0%BE%D1%80%D0%BA%D0%B0-4.jpg',\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Sasha',\r\n            img: 'https://cs-love.net/avatars/images/cs-love-avatar-0.jpg',\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Victor',\r\n            img: 'https://sovietgames.su/wp-content/uploads/2016/07/%D0%90%D0%B2%D0%B0%D1%82%D0%B0%D1%80%D0%BA%D0%B0.jpg',\r\n        },\r\n    ] as Array<DialogType>,\r\n}\r\n\r\nconst dialogsReducer = (state = initialState,\r\n                        action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/dialogs/ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 1, message: action.newMessageBody}],\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessage: (newMessageBody: string) => ({\r\n        type: 'socialNetwork/dialogs/ADD-MESSAGE',\r\n        newMessageBody,\r\n    } as const)\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionTypes<typeof actions>","import React from 'react'\r\nimport s from './FormsControl.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form'\r\nimport {ValidatorsType} from \"../../../utils/validators\";\r\nimport {Input} from \"antd\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> =\r\n    ({\r\n         meta: {touched, error},\r\n         children\r\n     }) => {\r\n        const hasErr = error && touched\r\n        return (\r\n            <div className={`${s.formControl} ${hasErr ? s.err : ''}`}>\r\n                <div>{children}</div>\r\n                {hasErr && <span>{error}</span>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport const MyTextarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <TextArea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const MyInput: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <Input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                          name: FormKeysType,\r\n                                          component: React.FC<WrappedFieldProps>,\r\n                                          validators: Array<ValidatorsType>,\r\n                                          type: string | null,\r\n                                          text = '',\r\n                                          props = {}) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                type={type}\r\n                {...props}\r\n            />\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type getStringKeys<T> = Extract<keyof T, string>","import React from 'react'\r\n\r\nexport type ValidatorsType = (value: string) => string | undefined\r\n\r\nexport const required: ValidatorsType = (value) => {\r\n  if (value) return undefined\r\n\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator  = (maxLength: number): ValidatorsType => (value) => {\r\n  if (value && value.length > maxLength)\r\n    return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a3bfbb3f-60e3-435f-a1ea-3cf028794565',\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n})\r\n\r\nexport type DefaultResponseType = {\r\n    data: { id: number }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    success = 0,\r\n    ERROR = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, getStringKeys, MyTextarea} from '../common/FormsControl/FormsControl'\r\nimport {maxLengthCreator, required} from '../../utils/validators'\r\nimport {NewMessageFormType} from \"./Dialogs\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> =\r\n    (props) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                {createField<NewMessageFormKeysType>('Message Text', \"newMessageBody\", MyTextarea, [required, maxLength100], null)}\r\n                <button>Send</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default reduxForm<NewMessageFormType, PropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\ntype NewMessageFormKeysType = getStringKeys<NewMessageFormType>\r\ntype PropsType = {}","export default __webpack_public_path__ + \"static/media/profile.5faf09a7.png\";","import React, {FC} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport AddMessageForm from './AddMessageForm'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType, MessagesType} from \"../../types/types\";\r\nimport userPhoto from './../../assets/images/profile.png'\r\n\r\n\r\ntype PropsType = {\r\n    dialogsData: Array<DialogType>\r\n    messagesData: Array<MessagesType>\r\n    addMessage: (text: string) => void\r\n}\r\nconst Dialogs: FC<PropsType> = ({messagesData, dialogsData, addMessage}) => {\r\n    let dialogsElement = dialogsData.map((d: DialogsPropsType) => (\r\n        <DialogItem id={d.id} name={d.name} img={d.img} key={d.id}/>\r\n    ))\r\n\r\n    let messagesElements = messagesData.map((m: { message: string }) => (\r\n        <div className={s.message}>{m.message}</div>\r\n    ))\r\n\r\n    let sendMessage = (value: NewMessageFormType) => {\r\n        addMessage(value.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>{dialogsElement}</div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <div className={s.addBlock}>\r\n                    <AddMessageForm onSubmit={sendMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype DialogsPropsType = {\r\n    id: number\r\n    img: string\r\n    name: string\r\n}\r\nconst DialogItem: FC<DialogsPropsType> = ({id, img, name}) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={`/dialogs/${id}`} activeClassName={s.activeLink}>\r\n                <div className={s.item}>\r\n                    <img src={img} alt={userPhoto}/>\r\n                    <div className={s.name}>{name}</div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}","import React, {ComponentType} from 'react'\r\nimport {actions} from '../../redux/dialogsReducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../hoc/WithAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    dialogsData: state.dialogsPage.dialogsData,\r\n    messagesData: state.dialogsPage.messagesData,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        addMessage: actions.addMessage\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","import {DefaultResponseType, instance, ResultCodeEnum, ResultCodeForCaptcha} from \"./api\";\r\n\r\n\r\ntype authResponseType = {\r\n    data: { id: number, email: string, login: string }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: { id: number }\r\n    resultCode: ResultCodeEnum | ResultCodeForCaptcha\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    auth() {\r\n        return instance.get<authResponseType>(`auth/me`).then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha,\r\n        }).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<DefaultResponseType>(`auth/login`)\r\n    },\r\n}","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<{ url: string }>(`security/get-captcha-url`).then(response => response.data)\r\n    },\r\n}","import {ResultCodeEnum, ResultCodeForCaptcha} from '../api/api'\r\nimport {stopSubmit} from 'redux-form'\r\nimport { DefaultThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {securityAPI} from \"../api/securityAPI\";\r\nimport {Action} from \"redux\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    isFetching: false,\r\n    captchaUrl: null as string | null,\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/auth/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        case 'socialNetwork/auth/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case 'socialNetwork/auth/GET_CAPTCHA':\r\n            return {...state, captchaUrl: action.text}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'socialNetwork/auth/SET_USER_DATA',\r\n        payload: {id, email, login, isAuth},\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'socialNetwork/auth/TOGGLE_IS_FETCHING',\r\n        isFetching,\r\n    } as const),\r\n    getCaptchaUrlSuccess: (text: string) => ({\r\n        type: 'socialNetwork/auth/GET_CAPTCHA',\r\n        text,\r\n    } as const)\r\n}\r\n\r\nexport const authMe = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.auth()\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n        const {id, email, login} = response.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const userLogin =\r\n    (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n        const response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (response.resultCode === ResultCodeEnum.success) {\r\n            dispatch(authMe())\r\n        } else {\r\n            if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            const err =\r\n                response.messages.length > 0\r\n                    ? response.messages[0]\r\n                    : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: err}))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptcha()\r\n    const captchaUrl = response.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const userLogOut = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await authAPI.logout()\r\n        if (response.data.resultCode === ResultCodeEnum.success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false));\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = DefaultThunkType<ActionsTypes >\r\n","import React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {userLogin} from '../../redux/authReducer'\r\nimport {createField, getStringKeys, MyInput} from '../common/FormsControl/FormsControl'\r\nimport {required} from '../../utils/validators'\r\nimport {Redirect} from 'react-router'\r\nimport s from './Login.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> & LoginFormOwnPropsType>\r\n    = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesKeyType>('Email', \"email\", MyInput, [required], null)}\r\n            {createField<LoginFormValuesKeyType>('Password', 'password', MyInput, [required], 'password')}\r\n            {captchaUrl && <img src={captchaUrl} alt={''}/>}\r\n            {captchaUrl &&\r\n            createField<LoginFormValuesKeyType>('Symbols form image', 'captcha', MyInput, [required], null)}\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div className={s.login__button}>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({\r\n    form: 'login',\r\n})(LoginForm)\r\n\r\nexport const LoginPage = () => {\r\n\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormValuesType) => {\r\n        dispatch(userLogin(email, password, rememberMe, captcha))\r\n    }\r\n\r\n    return isAuth ? (\r\n        <Redirect to={'/profile'}/>\r\n    ) : (\r\n            <div className={s.login__container}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string | null\r\n}\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesKeyType = getStringKeys<LoginFormValuesType>","import {PhotosType, ProfileType} from \"../types/types\"\r\nimport {DefaultResponseType, instance, ResultCodeEnum} from \"./api\"\r\n\r\n\r\ntype savePhotoType = {\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n}\r\nexport const profileAPI = {\r\n    getProfileInfo(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<DefaultResponseType>(`profile/status`, {\r\n            status,\r\n        })\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put<savePhotoType>(`profile/photo`, formData, {\r\n            headers: {'Content-Type': 'multipart/form-data'},\r\n        }).then(response => response.data)\r\n    },\r\n    saveData(data: ProfileType) {\r\n        return instance.put<DefaultResponseType>(`profile`, data).then(response => response.data)\r\n    },\r\n}","import {stopSubmit} from 'redux-form'\r\nimport {ResultCodeEnum} from '../api/api'\r\nimport {PhotosType, PostDataType, ProfileType} from \"../types/types\";\r\nimport {AppStateType, DefaultThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: 'How are you?'},\r\n        {id: 2, message: \"It's my first post\"},\r\n        {id: 3, message: \"It's my second post\"},\r\n        {id: 4, message: \"It's my 4th post\"},\r\n    ] as Array<PostDataType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    editMode: false,\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/profile/ADD_POST': {\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData,\r\n                    {\r\n                        id: 5,\r\n                        message: action.postText,\r\n                    },\r\n                ],\r\n            }\r\n        }\r\n        case 'socialNetwork/profile/DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                postsData: state.postsData.filter((p) => p.id !== action.postId),\r\n            }\r\n        }\r\n\r\n        case 'socialNetwork/profile/SET_USER_PROFILE':\r\n            return {...state, profile: action.profile}\r\n\r\n        case 'socialNetwork/profile/SET_STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'socialNetwork/profile/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n\r\n        case 'socialNetwork/profile/TOGGLE_EDIT_MODE':\r\n            return {...state, editMode: action.editMode}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPost: (postText: string) => ({type: 'socialNetwork/profile/ADD_POST', postText} as const),\r\n    deletePost: (postId: number) => ({type: 'socialNetwork/profile/DELETE_POST', postId} as const),\r\n    setUserProfile: (profile: ProfileType) => ({\r\n        type: 'socialNetwork/profile/SET_USER_PROFILE',\r\n        profile,\r\n    } as const),\r\n    setStatus: (status: string) => ({\r\n        type: 'socialNetwork/profile/SET_STATUS',\r\n        status,\r\n    } as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'socialNetwork/profile/SAVE_PHOTO_SUCCESS', photos} as const),\r\n    toggleEditMode: (editMode: boolean) => ({\r\n        type: 'socialNetwork/profile/TOGGLE_EDIT_MODE',\r\n        editMode,\r\n    } as const)\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(actions.setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === ResultCodeEnum.success) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getProfileInfo = (userId: number | null): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.getProfileInfo(userId)\r\n        dispatch(actions.setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (photoFile: File): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.savePhoto(photoFile)\r\n        if (response.resultCode === ResultCodeEnum.success) {\r\n            dispatch(actions.savePhotoSuccess(response.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveData = (data: ProfileType) => {\r\n    return async (dispatch: any, getState: () => AppStateType) => {\r\n        const id = getState().auth.id\r\n        const response = await profileAPI.saveData(data)\r\n        if (response.resultCode === ResultCodeEnum.success) {\r\n            dispatch(getProfileInfo(id))\r\n            dispatch(actions.toggleEditMode(false))\r\n        } else {\r\n            dispatch(stopSubmit('profileForm', {_error: response.messages[0]}))\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = DefaultThunkType<ActionsTypes>\r\n","import React, {FC} from 'react'\r\nimport s from './Post.module.css'\r\nimport profileDefault from './../../../../assets/images/profile.png'\r\n\r\ntype PropsType = {\r\n    img: string | null\r\n    message: string\r\n}\r\nconst Post: FC<PropsType> = ({img, message}) => {\r\n  return (\r\n    <div className={s.itemBox}>\r\n      <div className={s.itemContent}>\r\n        <div className={s.imgBox}>\r\n          <img src={img || profileDefault} />\r\n        </div>\r\n        <div className={s.text}>{message}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {maxLengthCreator} from '../../../utils/validators'\r\nimport {createField, getStringKeys, MyTextarea} from '../../common/FormsControl/FormsControl'\r\n\r\nconst maxLength70 = maxLengthCreator(70)\r\n\r\nconst MyPostForm: React.FC<InjectedFormProps<NewPostFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewPostKeysType>('New Post Text', 'postText', MyTextarea, [maxLength70], null)}\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostReduxForm = reduxForm<NewPostFormType, PropsType>({\r\n    form: 'login',\r\n})(MyPostForm)\r\n\r\ntype PostsFormType = {\r\n    addPost: (postText: string) => void\r\n}\r\nconst PostsForm: React.FC<PostsFormType> = (props) => {\r\n\r\n    const onSubmit = (formData: NewPostFormType) => {\r\n        props.addPost(formData.postText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MyPostReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsForm\r\n\r\ntype PropsType = {}\r\ntype NewPostFormType = {\r\n    postText: string\r\n}\r\ntype NewPostKeysType = getStringKeys<NewPostFormType>","import React from 'react'\r\nimport s from './Preloader.module.css'\r\n\r\nlet Preloader = () => {\r\n  return (\r\n    <img\r\n      className={s.loader}\r\n      src={'https://samherbert.net/svg-loaders/svg-loaders/puff.svg'}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Preloader\r\n","import React, {FC} from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostsForm from './MyPostsForm'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PostsDataType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    postsData: Array<PostsDataType>\r\n    addPost: (postText: string) => void\r\n}\r\nconst MyPosts: FC<PropsType> = React.memo(({profile, postsData, addPost}) => {\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n  return (\r\n    <div className={s.postBlock}>\r\n      <h3>My posts</h3>\r\n      <div className={s.posts}>\r\n        {postsData.map((elem) => {\r\n          return (\r\n            <Post\r\n              message={elem.message}\r\n              key={elem.id}\r\n              img={profile.photos.large}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n      <div>\r\n        <MyPostsForm addPost={addPost} />\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default MyPosts\r\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './ProfileHeader.module.css'\r\nimport {Input} from \"antd\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    let deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div className={s.profile__status}>\r\n            {!editMode && (\r\n                <div>\r\n                    {props.isOwner ?\r\n                        (<a onClick={activateEditMode}>\r\n                            {props.status || 'Set Status'}\r\n                        </a>) : (<span>\r\n                            {props.status || `This user did not set his status`}\r\n                        </span>)\r\n                    }\r\n                </div>\r\n            )}\r\n            {editMode && (\r\n                <div>\r\n                    <Input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deActivateEditMode}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus\r\n","import {ProfileType} from \"../../../types/types\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport s from \"./ProfileHeader.module.css\";\r\nimport profilePhoto from \"../../../assets/images/profile.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\ntype ProfileHeaderPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n\r\n    updateStatus: () => void\r\n    savePhoto: (file: File) => void\r\n}\r\nexport const ProfileHeader: React.FC<ProfileHeaderPropsType> = (props) => {\r\n    const {savePhoto, profile, isOwner, status, updateStatus} = props\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profile__header__container}>\r\n            <label className={s.avatar__container}>\r\n                <img src={profile.photos.large || profilePhoto}/>\r\n                {isOwner &&\r\n                < input type=\"file\" name=\"myfile\" style={{display: 'none'}} onChange={onMainPhotoSelected}/>}\r\n            </label>\r\n            <div>\r\n                <div className={s.profile__name}>{profile.fullName}</div>\r\n                <ProfileStatus\r\n                    isOwner={isOwner}\r\n                    status={status}\r\n                    updateStatus={updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, getStringKeys, MyInput} from '../../common/FormsControl/FormsControl'\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Button} from \"antd\";\r\n\r\ntype EditModeType = {\r\n    profile: ProfileType\r\n    submit: (formName: string) => void\r\n    saveData: (formData: ProfileType) => void\r\n}\r\nconst EditMode: React.FC<EditModeType> = ({profile, submit, saveData}) => {\r\n\r\n    const submitForm = (formData: ProfileType) => {\r\n        saveData(formData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <EditModeFormRedux\r\n                submit={submit}\r\n                profile={profile}\r\n                initialValues={profile}\r\n                onSubmit={submitForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst EditModeForm: React.FC<InjectedFormProps<ProfileType, ProfileFormOwnPropsType> & ProfileFormOwnPropsType> =\r\n    ({handleSubmit, submit}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit} className={`${s.profile__info__container}`}>\r\n                <div className={`${s.profile__contacts__container}`}>\r\n                    Full Name:\r\n                    {createField<ProfileFormValuesKeyType>('Full Name', 'fullName', MyInput, [], null)}\r\n                    About me:\r\n                    {createField<ProfileFormValuesKeyType>('About me', 'aboutMe', MyInput, [], null)}\r\n                    Job status:\r\n                    {createField<ProfileFormValuesKeyType>('Job status', 'lookingForAJobDescription', MyInput, [], null)}\r\n                </div>\r\n                <div className={`${s.profile__contacts__container}`}>\r\n                    Facebook:\r\n                    {createField('Your facebook profile', `contacts.facebook`, MyInput, [], null)}\r\n                    Instagram:\r\n                    {createField('Your instagram profile', `contacts.instagram`, MyInput, [], null)}\r\n                    Twitter:\r\n                    {createField('Your twitter profile', `contacts.twitter`, MyInput, [], null)}\r\n                    Github:\r\n                    {createField('Your github profile', `contacts.github`, MyInput, [], null)}\r\n                </div>\r\n                <div className={`${s.profile__contacts__container}`}>\r\n                    <Button onClick={() => {\r\n                        submit('profileForm')\r\n                    }} type={'primary'} block>Save Data</Button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst EditModeFormRedux = reduxForm<ProfileType, ProfileFormOwnPropsType>({\r\n    form: 'profileForm',\r\n})(EditModeForm)\r\n\r\nexport default EditMode\r\n\r\n\r\ntype ProfileFormOwnPropsType = {\r\n    profile: ProfileType\r\n    submit: any\r\n}\r\ntype ProfileFormValuesKeyType = getStringKeys<ProfileType>","export default __webpack_public_path__ + \"static/media/facebook.4a455df5.png\";","export default __webpack_public_path__ + \"static/media/github.1c95b85d.png\";","export default __webpack_public_path__ + \"static/media/twitter.57573394.png\";","export default __webpack_public_path__ + \"static/media/instagram.a1950cc4.png\";","import React, {FC} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport EditMode from './EditMode'\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Button} from \"antd\";\r\nimport facebookLogo from \"../../../assets/images/facebook.png\";\r\nimport githubLogo from \"../../../assets/images/github.png\";\r\nimport twitterLogo from \"../../../assets/images/twitter.png\";\r\nimport instagramLogo from \"../../../assets/images/instagram.png\";\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    editMode: boolean\r\n\r\n    submit: () => void\r\n    saveData: () => void\r\n    toggleEditMode: () => void\r\n}\r\nconst ProfileInfo: React.FC<ProfileDataType> = (props) => {\r\n    return (\r\n        <>\r\n            {props.editMode ? (\r\n                <EditMode {...props} />\r\n            ) : (\r\n                <StaticProfileData {...props} />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\ntype StaticProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    toggleEditMode: (arg: boolean) => void\r\n}\r\nconst StaticProfileData: FC<StaticProfileDataPropsType> = ({profile, toggleEditMode, isOwner}) => {\r\n    const {facebook, instagram, twitter, github} = profile.contacts\r\ndebugger\r\n    return (\r\n        <div className={s.profile__info__container}>\r\n            {isOwner && (\r\n                <Button type=\"default\" block onClick={() => {\r\n                    toggleEditMode(true)\r\n                }}\r\n                > Edit Details </Button>\r\n            )}\r\n            {(!profile.aboutMe && !profile.lookingForAJobDescription) ?\r\n                (<div className={s.profile__info__nodata}>This User did not add any info about himself</div>) :\r\n                ( <ul className={s.profile__info__list}>\r\n                    <li>About me<br/><span>{profile.aboutMe}</span></li>\r\n                    <li>Job status<br/><span>{profile.lookingForAJobDescription}</span></li>\r\n                </ul>)}\r\n\r\n            <div className={s.profile__contacts__container}>\r\n                <div>Contacts</div>\r\n                <div className={s.profile__contacts__list}>\r\n                    {facebook && <a href={`${facebook}`}><img src={facebookLogo}/></a>}\r\n                    {instagram && <a href={`${instagram}`}><img src={instagramLogo}/></a>}\r\n                    {twitter && <a href={`${twitter}`}><img src={twitterLogo}/></a>}\r\n                    {github && <a href={`${github}`}><img src={githubLogo}/></a>}\r\n                    {(!facebook && !instagram && !github && !twitter) &&\r\n                    (<div className={s.profile__contacts__nodata}>This User did not add any contact Information</div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React, {ComponentType} from 'react'\r\nimport {\r\n    getProfileInfo,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    actions,\r\n    saveData,\r\n} from '../../redux/profileReducer'\r\nimport {connect} from 'react-redux'\r\nimport {withRouter} from 'react-router'\r\nimport {withAuthRedirect} from '../../hoc/WithAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {submit} from 'redux-form'\r\nimport {AppStateType} from \"../../redux/reduxStore\"\r\nimport {PostDataType, ProfileType} from \"../../types/types\"\r\nimport MyPosts from \"./MyPosts/MyPosts\"\r\nimport {RouteComponentProps} from \"react-router-dom\"\r\nimport s from './ProfilePage.module.css'\r\nimport {ProfileHeader} from \"./ProfileHeader/ProfileHeader\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    match: any\r\n    authorizedUserId: number\r\n    profile: ProfileType\r\n    status: string\r\n    editMode: boolean\r\n    postsData: Array<PostDataType>\r\n\r\n    submit: () => void\r\n    saveData: () => void\r\n    toggleEditMode: () => void\r\n    savePhoto: (file: File) => void\r\n    updateStatus: () => void\r\n    getProfileInfo: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    addPost: (postText: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass Profile extends React.Component<PropsType & RouteComponentProps<PathParamsType>> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getProfileInfo(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={s.profile__page}>\r\n                <ProfileHeader\r\n                    savePhoto={this.props.savePhoto}\r\n                    profile={this.props.profile}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                />\r\n                <ProfileInfo\r\n                    profile={this.props.profile}\r\n                    toggleEditMode={this.props.toggleEditMode}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    editMode={this.props.editMode}\r\n                    saveData={this.props.saveData}\r\n                    submit={this.props.submit}\r\n                />\r\n                <MyPosts\r\n                    profile={this.props.profile}\r\n                    addPost={this.props.addPost}\r\n                    postsData={this.props.postsData}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    editMode: state.profilePage.editMode,\r\n    postsData: state.profilePage.postsData,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        submit,\r\n        getProfileInfo,\r\n        savePhoto,\r\n        getStatus,\r\n        updateStatus,\r\n        saveData,\r\n        toggleEditMode: actions.toggleEditMode,\r\n        addPost: actions.addPost\r\n    })\r\n)(Profile)\r\n","import {authMe} from './authReducer'\r\nimport { InferActionTypes} from \"./reduxStore\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    collapsed: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/app/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        case \"socialNetwork/app/COLLAPSED_SUCCESS\" : {\r\n            return {\r\n                ...state,\r\n                collapsed: action.collapsed\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'socialNetwork/app/INITIALIZED_SUCCESS'} as const),\r\n    toggleCollapsedMode: (collapsed: boolean) => ({type: 'socialNetwork/app/COLLAPSED_SUCCESS', collapsed }as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(authMe())\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(actions.initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n// type ThunkType = DefaultThunkType<ActionsType>","export const updateObjectInArray = (\r\n  items: any,\r\n  itemId: any,\r\n  objPropsName: any,\r\n  newObjProps: any\r\n) => {\r\n  return items.map((u: any) => {\r\n    if (u[objPropsName] === itemId) {\r\n      return { ...u, ...newObjProps }\r\n    }\r\n    return u\r\n  })\r\n}\r\n","import {DefaultResponseType, instance} from \"./api\"\r\n\r\n\r\ntype UsersType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {small: string, large: string}\r\n    followed: boolean\r\n}\r\ntype getUsersType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string= '', friend: null | boolean = null) {\r\n        return instance\r\n            .get<getUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\r\n            .then((response) => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<DefaultResponseType>(`follow/${id}`).then((response) => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<DefaultResponseType>(`follow/${id}`, {}).then((response) => response.data)\r\n    },\r\n}","import {DefaultResponseType, ResultCodeEnum} from '../api/api'\r\nimport {updateObjectInArray} from '../utils/object-helpers'\r\nimport {UserType} from \"../types/types\";\r\nimport {DefaultThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 16,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, //array of usersId\r\n    portionSize: 10,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/users/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {\r\n                    followed: true,\r\n                }),\r\n            }\r\n        case 'socialNetwork/users/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {\r\n                    followed: false,\r\n                }),\r\n            }\r\n        case 'socialNetwork/users/SET_USERS':\r\n            return {...state, users: action.users}\r\n\r\n        case 'socialNetwork/users/SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n\r\n        case 'socialNetwork/users/SET_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.totalUsers}\r\n\r\n        case 'socialNetwork/users/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case 'socialNetwork/users/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n\r\n        case 'socialNetwork/users/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id) => id !== action.userId),\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: 'socialNetwork/users/FOLLOW',\r\n        userId,\r\n    } as const),\r\n    unfollowSuccess: (userId: number) => ({\r\n        type: 'socialNetwork/users/UNFOLLOW',\r\n        userId,\r\n    } as const),\r\n    setUsers: (users: Array<UserType>) => ({\r\n        type: 'socialNetwork/users/SET_USERS',\r\n        users,\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: 'socialNetwork/users/SET_FILTER',\r\n        payload: filter,\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'socialNetwork/users/SET_CURRENT_PAGE',\r\n        currentPage,\r\n    } as const),\r\n    setTotalUsersCount: (totalUsers: number) => ({\r\n        type: 'socialNetwork/users/SET_USERS_COUNT',\r\n        totalUsers,\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'socialNetwork/users/TOGGLE_IS_FETCHING',\r\n        isFetching,\r\n    } as const),\r\n    toggleIsFollowingProgress: (followingInProgress: boolean, userId: number) => ({\r\n        type: 'socialNetwork/users/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        userId,\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setFilter(filter))\r\n        let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n        dispatch(actions.toggleIsFetching(false))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number,\r\n                                   apiMethod: (userId: number) => Promise<DefaultResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleIsFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(\r\n            dispatch,\r\n            userId,\r\n            usersAPI.follow.bind(userId),\r\n            actions.followSuccess\r\n        )\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(\r\n            dispatch,\r\n            userId,\r\n            usersAPI.unfollow.bind(userId),\r\n            actions.unfollowSuccess\r\n        )\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = DefaultThunkType<ActionsTypes>\r\nexport type FilterType = typeof initialState.filter\r\nexport type InitialStateType = typeof initialState\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from 'redux'\r\nimport authReducer from './authReducer'\r\nimport dialogsReducer from './dialogsReducer'\r\nimport profileReducer from './profileReducer'\r\nimport usersReducer from './usersReducer'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './appReducer'\r\nimport chatReducer from \"./chatReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n  dialogsPage: dialogsReducer,\r\n  profilePage: profileReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer\r\n})\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionTypes<T> = T extends  {[key: string]:  (...args: any[]) => infer U} ? U : never\r\n\r\nexport type DefaultThunkType<A extends Action> = ThunkAction<Promise<void>, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n)\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store\r\n","import React, {ComponentType, Suspense} from 'react'\r\nimport Preloader from '../components/common/Preloader/Preloader'\r\n\r\nexport function LazyLoading<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <>\r\n        <Suspense fallback={<Preloader />}>\r\n          <WrappedComponent {...props} />\r\n        </Suspense>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LazyLoading\r\n","import React from 'react'\r\nimport styles from './Pagination.module.css'\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  onPageChanged: (currentPage: number ) => void\r\n}\r\n\r\nlet Pagination: React.FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  currentPage,\r\n  onPageChanged,\r\n}) => {\r\n  let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n  let before: number   = currentPage - 1\r\n  before = before < 1 ? 1 : before\r\n  let after: number  = currentPage + 1\r\n  after = after >= pagesCount ? pagesCount : after\r\n\r\n  return (\r\n    <div className={styles.paginator}>\r\n      {/* pagination */}\r\n      {/* first page */}\r\n      <div>\r\n        {currentPage === 1 ? null : (\r\n          <>\r\n            <span\r\n              onClick={() => {\r\n                onPageChanged(1)\r\n              }}\r\n            >\r\n              {1}\r\n            </span>\r\n            <span>...</span>\r\n          </>\r\n        )}\r\n\r\n        {/* first page */}\r\n        {/* before current page */}\r\n        <span\r\n          onClick={() => {\r\n            onPageChanged(before)\r\n          }}\r\n        >\r\n          {currentPage < 3 ? null : <span>{before}</span>}\r\n        </span>\r\n        {/* before current page */}\r\n        {/* current page */}\r\n        <span>\r\n          {currentPage < 3 ? null : <span>..</span>}\r\n          <span className={styles.selectedPage}>{currentPage}</span>\r\n          {currentPage > pagesCount - 2 ? null : <span>..</span>}\r\n        </span>\r\n        {/* current page */}\r\n        {/* after current page */}\r\n        {after === pagesCount ? null : (\r\n          <>\r\n            <span\r\n              onClick={() => {\r\n                onPageChanged(after)\r\n              }}\r\n            >\r\n              {after}\r\n            </span>\r\n          </>\r\n        )\r\n}\r\n\r\n        {/* after current page */}\r\n        {/* last page */}\r\n        {currentPage === pagesCount ? null : (\r\n          <>\r\n            <span>...</span>\r\n            <span\r\n              onClick={() => {\r\n                onPageChanged(pagesCount)\r\n              }}\r\n            >\r\n              {pagesCount}\r\n            </span>\r\n          </>\r\n        )}\r\n        {/* last page */}\r\n      </div>\r\n      {/* pagination */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport styles from './Users.module.css'\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    isAuth: boolean\r\n}\r\nlet User: FC<PropsType> = ({user, followingInProgress, unfollow, follow, isAuth}) => {\r\n    return (\r\n        <div className={styles.userContainer}>\r\n            <div>\r\n                <NavLink to={`/profile/${user.id}`}>\r\n                    <img\r\n                        src={\r\n                            user.photos.small != null\r\n                                ? user.photos.small\r\n                                : 'https://www.pavilionweb.com/wp-content/uploads/2017/03/man-300x300.png'\r\n                        }\r\n                        alt='userPhoto'\r\n                        className={styles.userPhoto}\r\n                    />\r\n                </NavLink>\r\n            </div>\r\n            {isAuth && (\r\n                <div>\r\n                    {user.followed ? (\r\n                        <button\r\n                            disabled={followingInProgress.some((id) => id === user.id)}\r\n                            onClick={() => {\r\n                                unfollow(user.id)\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            disabled={followingInProgress.some((id) => id === user.id)}\r\n                            onClick={() => {\r\n                                follow(user.id)\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n            <div className={styles.userDescription}>\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import { createSelector } from 'reselect'\r\nimport {AppStateType} from \"../reduxStore\";\r\n\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsersData = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\nexport const getPortionSize = (state: AppStateType) => {\r\n  return state.usersPage.portionSize\r\n}\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n  return state.auth.isAuth\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter\r\n}","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/usersReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/Selectors/usersSelectors\";\r\n\r\nconst userSearchForms = (values: FormType) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\ntype UserSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\nexport const UserSearchForm: React.FC<UserSearchFormPropsType> = ({onFilterChanged}) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null\r\n                : values.friend === 'true' ? true : false\r\n        }\r\n        onFilterChanged(filter)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize={true}\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={userSearchForms}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only Followed</option>\r\n                            <option value=\"false\">Only Unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserSearchForm","import {AppStateType} from \"../reduxStore\";\r\n\r\nexport const getAuthFetching = (state: AppStateType) =>  state.auth.isFetching\r\n\r\nexport const getLogin = (state: AppStateType) => state.auth.login\r\n","import React from 'react'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport s from './Header.module.css'\r\nimport {Avatar, Button, Col, Menu, Row} from \"antd\";\r\nimport {MessageOutlined, SettingOutlined,\r\n    UsergroupDeleteOutlined, UserOutlined, WechatOutlined} from \"@ant-design/icons\";\r\nimport {Header} from \"antd/es/layout/layout\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAuthFetching, getLogin} from \"../../redux/Selectors/headerSelectors\";\r\nimport {getIsAuth} from \"../../redux/Selectors/usersSelectors\";\r\nimport {userLogOut} from \"../../redux/authReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const AppHeader = () => {\r\n\r\n    const isFetching = useSelector(getAuthFetching)\r\n    const isAuth = useSelector(getIsAuth)\r\n    const login = useSelector(getLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const LogOut = () => {\r\n        dispatch(userLogOut())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isFetching ? <Preloader/> : (\r\n                <Header className=\"site-layout-background\" style={{padding: 0}}>\r\n                    {isAuth ? (\r\n                        <Row>\r\n                            <Col span={18}>\r\n                                <Menu theme=\"dark\" mode=\"horizontal\" className={s.altMenu}>\r\n                                    <Menu.Item key=\"1\" className={s.altMenuItem}>\r\n                                        <NavLink to=\"/profile\">\r\n                                            <UserOutlined style={{fontSize: '19px'}}/>\r\n                                        </NavLink>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"2\" className={s.altMenuItem}>\r\n                                        <NavLink to=\"/dialogs\">\r\n                                            <MessageOutlined style={{fontSize: '19px'}}/>\r\n                                        </NavLink>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"3\" className={s.altMenuItem}>\r\n                                        <NavLink to=\"/users\">\r\n                                            <UsergroupDeleteOutlined style={{fontSize: '19px'}}/>\r\n                                        </NavLink>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"4\" className={s.altMenuItem}>\r\n                                        <NavLink to=\"/settings\">\r\n                                            <SettingOutlined style={{fontSize: '19px'}}/>\r\n                                        </NavLink>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"5\" className={s.altMenuItem}>\r\n                                        <NavLink to=\"/chat\">\r\n                                            <WechatOutlined style={{fontSize: '19px'}}/>\r\n                                        </NavLink>\r\n                                    </Menu.Item>\r\n                                </Menu>\r\n                            </Col>\r\n                            <Col span={6} className={s.loginBlock}>\r\n                                <div>\r\n                                    <span className={s.hiddenLoginBlock}>\r\n                                        <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                                        <span className={s.nickName}>{login}</span>\r\n                                    </span>\r\n                                    <Button onClick={() => LogOut()}>Logout</Button>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null}\r\n                </Header>\r\n            )}\r\n        </>\r\n\r\n    )\r\n}\r\n","import React, {Component, ComponentType} from 'react'\nimport {HashRouter, NavLink, Redirect, Route, withRouter} from 'react-router-dom'\nimport './App.css'\nimport DialogsContainer from './components/Dialogs/DialogsContainer'\nimport {LoginPage} from './components/Login/LoginPage'\nimport Profile from './components/Profile/ProfilePage'\nimport {connect, Provider} from 'react-redux'\nimport {compose} from 'redux'\nimport {initializeApp} from './redux/appReducer'\nimport Preloader from './components/common/Preloader/Preloader'\nimport store, {AppStateType} from './redux/reduxStore'\nimport LazyLoading from './hoc/LazyLoading'\nimport {Users} from \"./components/Users/Users\"\nimport 'antd/dist/antd.css'\nimport {Layout, Menu} from 'antd';\nimport {UserOutlined} from '@ant-design/icons';\nimport {AppHeader} from \"./components/Header/Header\";\nimport {withAuthRedirect} from \"./hoc/WithAuthRedirect\";\n\nconst {SubMenu} = Menu;\nconst {Content, Footer, Sider} = Layout;\n\nconst SettingsContainer = React.lazy(() => import('./components/Settings/Settings'))\nconst ChatPage = React.lazy(() => import('./pages/Chat/Chat'))\n\nconst LazyChat = LazyLoading(ChatPage)\nconst LazySettings = LazyLoading(SettingsContainer)\nconst UsersPage = withAuthRedirect(Users)\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n    toggleCollapseMode: (collapsed: boolean) => void\n}\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occurred')\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\n            'unhandledrejection',\n            this.catchAllUnhandledErrors\n        )\n\n\n    }\n\n    render() {\n        if (!this.props.initialized) return <Preloader/>\n\n        return (\n            <Layout>\n                <AppHeader/>\n                <Content className='main__container'>\n                    <Layout className=\"site-layout-background\">\n                        {this.props.isAuth ? (\n                            <Sider className=\"site-layout-background navbar\" width={200} style={{padding: '0'}}>\n                                <Menu\n                                    mode=\"inline\"\n                                    defaultOpenKeys={['sub1']}\n                                    style={{height: '100%'}}\n                                >\n                                    <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Profile\">\n                                        <Menu.Item key=\"1\">\n                                            <NavLink to=\"/profile\">My Profile</NavLink>\n                                        </Menu.Item>\n                                        <Menu.Item key=\"2\">\n                                            <NavLink to=\"/dialogs\">Messages</NavLink>\n                                        </Menu.Item>\n                                        <Menu.Item key=\"3\">\n                                            <NavLink to=\"/chat\">Common Chat</NavLink>\n                                        </Menu.Item>\n                                    </SubMenu>\n                                    <Menu.Item key=\"4\">\n                                        <NavLink to=\"/users\">Find Users</NavLink>\n                                    </Menu.Item>\n                                    <Menu.Item key=\"5\">\n                                        <NavLink to=\"/settings\">Settings</NavLink>\n                                    </Menu.Item>\n                                </Menu>\n                            </Sider>\n                        ) : null}\n                        <Content style={{minHeight: 280}}>\n                            <Route exact path=\"/\" render={() => <Redirect to={'/profile'}/>}/>\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                            <Route path=\"/profile/:userId?\" render={() => <Profile/>}/>\n                            <Route path=\"/settings\" render={() => <LazySettings/>}/>\n                            <Route path=\"/users\" render={() => <UsersPage/>}/>\n                            <Route path=\"/login\" render={() => <LoginPage/>}/>\n                            <Route path=\"/chat\" render={() => <LazyChat/>}/>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Rogoznec Maxim Social Network 2022</Footer>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n    collapsed: state.app.collapsed,\n    isAuth: state.auth.isAuth\n})\n\nlet AppContainer = compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})\n)(App)\n\nconst SamuraiJSApp: React.FC = () => {\n    return (\n        <React.StrictMode>\n            <HashRouter>\n                <Provider store={store}>\n                    <AppContainer/>\n                </Provider>\n            </HashRouter>\n        </React.StrictMode>\n    )\n}\n\nexport default SamuraiJSApp\n","import React, {useEffect} from 'react'\r\nimport Pagination from '../common/Pagination/Pagination'\r\nimport User from './User'\r\nimport UserSearchForm from \"./UserSearchForms\"\r\nimport {actions, FilterType, follow, requestUsers, unfollow} from \"../../redux/usersReducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsAuth, getIsFetching, getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersData, getUsersFilter\r\n} from \"../../redux/Selectors/usersSelectors\"\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport * as queryString from \"querystring\";\r\n\r\nexport const Users = () => {\r\n\r\n    const users = useSelector(getUsersData)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const isAuth = useSelector(getIsAuth)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        const parsed = queryString.parse(history.location.search.slice(1))\r\n        if (parsed.page) actualPage = +parsed.page\r\n        if (parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        if (parsed.friend) actualFilter = {...actualFilter, friend: parsed.friend === 'null' ? null :\r\n                parsed.friend === 'true' ? true :\r\n                    false\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        history.push({\r\n            pathname: './users',\r\n            search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(requestUsers(currentPage, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const followUser = (userID: number) => {\r\n        dispatch(follow(userID))\r\n    }\r\n\r\n    const unfollowUser = (userID: number) => {\r\n        dispatch(unfollow(userID))\r\n    }\r\n\r\n    return <>\r\n        {isFetching ? <Preloader/> : (\r\n            <div>\r\n                <UserSearchForm onFilterChanged={onFilterChanged}/>\r\n                <Pagination\r\n                    currentPage={currentPage}\r\n                    onPageChanged={onPageChanged}\r\n                    totalItemsCount={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                />\r\n                {users.map((u) => (\r\n                    <User\r\n                        user={u}\r\n                        key={u.id}\r\n                        followingInProgress={followingInProgress}\r\n                        unfollow={unfollowUser}\r\n                        follow={followUser}\r\n                        isAuth={isAuth}\r\n                    />\r\n                ))}\r\n            </div>\r\n        )}\r\n    </>\r\n}\r\n","import reportWebVitals from './reportWebVitals'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport SamuraiJSApp from './App'\n\nReactDOM.render(<SamuraiJSApp />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__35PTw\",\"dialogsItems\":\"Dialogs_dialogsItems__1LdbS\",\"addBlock\":\"Dialogs_addBlock__i-3rP\",\"message\":\"Dialogs_message__2SLPD\",\"dialog\":\"Dialogs_dialog__1PfVP\",\"item\":\"Dialogs_item__2dk7t\",\"name\":\"Dialogs_name__1ILBM\",\"activeLink\":\"Dialogs_activeLink__2eZtc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nickName\":\"Header_nickName__342Lj\",\"altMenuItem\":\"Header_altMenuItem__2w-Wg\",\"loginBlock\":\"Header_loginBlock__3SCHH\",\"hiddenLoginBlock\":\"Header_hiddenLoginBlock__DZ5U2\",\"altMenu\":\"Header_altMenu__3CuG_\"};","import React, {ComponentType} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router'\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props)  => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>\r\n    (mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile__header__container\":\"ProfileHeader_profile__header__container__3-jL6\",\"avatar__container\":\"ProfileHeader_avatar__container__3t-pn\",\"profile__name\":\"ProfileHeader_profile__name__zFppC\",\"profile__status\":\"ProfileHeader_profile__status__25LvE\"};"],"sourceRoot":""}