{"version":3,"sources":["components/common/Preloader/Preloader.module.css","components/Users/Users.module.css","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","reportWebVitals.js","redux/dialogsReducer.ts","components/common/FormsControl/FormsControl.tsx","utils/validators.tsx","api/api.ts","components/Dialogs/AddMessageForm.tsx","assets/images/profile.png","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/Preloader/Preloader.tsx","components/Header/Header.tsx","api/authAPI.ts","api/securityAPI.ts","redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Navbar/Navbar.tsx","api/profileAPI.ts","redux/profileReducer.ts","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/EditMode.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileContainer.tsx","utils/object-helpers.ts","api/usersAPI.ts","redux/usersReducer.ts","components/common/Pagination/Pagination.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx","redux/appReducer.ts","redux/reduxStore.ts","hoc/LazyLoading.tsx","App.tsx","index.tsx","components/common/FormsControl/FormsControl.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","hoc/WithAuthRedirect.tsx","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/common/Pagination/Pagination.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","messagesData","id","message","dialogsData","name","img","dialogsReducer","state","action","type","newMessageBody","FormControl","meta","touched","error","children","hasErr","className","s","formControl","err","Textarea","props","input","restProps","Input","createField","placeholder","component","validators","text","Field","validate","ResultCodeEnum","ResultCodeForCaptcha","required","value","maxLengthCreator","maxLength","length","maxLength100","reduxForm","form","onSubmit","handleSubmit","DialogItem","dialog","to","activeClassName","activeLink","item","src","alt","userPhoto","Dialogs","addMessage","dialogsElement","map","d","messagesElements","m","dialogs","dialogsItems","messages","addBlock","compose","connect","dialogsPage","withAuthRedirect","Preloader","loader","Header","header","isFetching","loginBlock","isAuth","login","onClick","userLogOut","instance","axios","create","withCredentials","headers","baseURL","authAPI","get","response","data","email","password","rememberMe","captcha","post","delete","securityAPI","captchaUrl","actions","payload","authMe","dispatch","a","resultCode","success","getCaptchaUrl","url","authReducer","HeaderContainer","this","React","Component","auth","LoginReduxForm","undefined","formSummaryError","userLogin","CaptchaIsRequired","stopSubmit","_error","Navbar","nav","users","profileAPI","userId","status","put","photoFile","formData","FormData","append","postsData","profile","editMode","addPost","postText","deletePost","postId","setUserProfile","setStatus","savePhotoSuccess","photos","toggleEditMode","getProfileInfo","profileReducer","filter","p","ProfileStatus","useState","setEditMode","useEffect","isOwner","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","EditModeFormRedux","infoBlock","infoBox","infoBoxItem","key","Object","keys","contacts","contactBoxItem","property","EditMode","submit","saveData","a0001","edit","initialValues","StaticProfileData","propertyString","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contacts","ProfileData","ProfileInfo","savePhoto","description","imgBox","ava","large","profilePhoto","target","files","Post","itemBox","itemContent","profileDefault","maxLength70","MyPostReduxForm","PostsForm","MyPosts","memo","postBlock","posts","elem","MyPostsForm","Profile","match","params","authorizedUserId","getStatus","refreshProfile","prevProps","withRouter","profilePage","getState","updateObjectInArray","items","itemId","objPropsName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","unfollow","follow","totalUsersCount","followingInProgress","portionSize","totalUsers","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","Pagination","totalItemsCount","onPageChanged","pagesCount","Math","ceil","before","after","styles","paginator","selectedPage","User","user","small","disabled","some","Users","getUsersData","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getPortionSize","getIsAuth","UsersContainer","setCurrentPage","bind","totalCount","initialized","appReducer","rootReducer","combineReducers","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","LazyLoading","LazySettings","WrappedComponent","fallback","lazy","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","DialogsContainer","pageTitle","AppContainer","promise","Promise","all","SamuraiJSApp","StrictMode","ReactDOM","document","getElementById","mapStateToPropsForRedirect"],"mappings":"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","file":"static/js/main.c6f67bbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__lWjDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2YoK6\",\"selectedPage\":\"Users_selectedPage__22Fmw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3Ojas\",\"item\":\"Navbar_item__2EV0a\",\"activeLink\":\"Navbar_activeLink__1VQ0J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__35PTw\",\"dialogsItems\":\"Dialogs_dialogsItems__1LdbS\",\"addBlock\":\"Dialogs_addBlock__i-3rP\",\"message\":\"Dialogs_message__2SLPD\",\"dialog\":\"Dialogs_dialog__1PfVP\",\"item\":\"Dialogs_item__2dk7t\",\"name\":\"Dialogs_name__1ILBM\",\"activeLink\":\"Dialogs_activeLink__2eZtc\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {DialogType, MessagesType} from \"../types/types\";\r\nimport {InferActionTypes} from \"./reduxStore\";\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: '42'},\r\n    ] as Array<MessagesType>,\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: 'Dima',\r\n            img: 'https://meragor.com/files/styles//ava_800_800_wm/standoff_162.jpg',\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Andrey',\r\n            img: 'https://avatars.mds.yandex.net/get-zen_doc/3512693/pub_5efb3ff066fe1d5006536937_5efb4be4cdd4d637ce0fd2e8/scale_1200',\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Maxim',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTn8H3mqnU943_lgdPtj-JIGRjyKAlp3FSLzg&usqp=CAU',\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Ghena',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSx5wghphVB-NTZeDHzsjPFUGY2_V-yPNnq1g&usqp=CAU',\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Renat',\r\n            img: 'http://pristor.ru/wp-content/uploads/2019/01/%D0%A8%D0%B8%D0%BA%D0%B0%D1%80%D0%BD%D1%8B%D0%B5-%D0%B0%D0%B2%D0%B0%D1%82%D0%B0%D1%80%D0%BA%D0%B8-%D0%B4%D0%BB%D1%8F-%D0%92%D0%9A%D0%BE%D0%BD%D1%82%D0%B0%D0%BA%D1%82%D0%B5-%D0%B4%D0%B5%D0%B2%D1%83%D1%88%D0%BA%D0%B0%D0%BC-%D0%B8-%D0%B4%D0%B5%D0%B2%D0%BE%D1%87%D0%BA%D0%B0%D0%BC-%D0%BF%D0%BE%D0%B4%D0%B1%D0%BE%D1%80%D0%BA%D0%B0-4.jpg',\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Sasha',\r\n            img: 'https://cs-love.net/avatars/images/cs-love-avatar-0.jpg',\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Victor',\r\n            img: 'https://sovietgames.su/wp-content/uploads/2016/07/%D0%90%D0%B2%D0%B0%D1%82%D0%B0%D1%80%D0%BA%D0%B0.jpg',\r\n        },\r\n    ] as Array<DialogType>,\r\n}\r\n\r\nconst dialogsReducer = (state = initialState,\r\n                        action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/dialogs/ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 1, message: action.newMessageBody}],\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessage: (newMessageBody: string) => ({\r\n        type: 'socialNetwork/dialogs/ADD-MESSAGE',\r\n        newMessageBody,\r\n    } as const)\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionTypes<typeof actions>","import React from 'react'\r\nimport s from './FormsControl.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form'\r\nimport {ValidatorsType} from \"../../../utils/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> =\r\n    ({\r\n         meta: {touched, error},\r\n         children\r\n     }) => {\r\n        const hasErr = error && touched\r\n        return (\r\n            <div className={`${s.formControl} ${hasErr ? s.err : ''}`}>\r\n                <div>{children}</div>\r\n                {hasErr && <span>{error}</span>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                          name: FormKeysType,\r\n                                          component: React.FC<WrappedFieldProps>,\r\n                                          validators: Array<ValidatorsType>,\r\n                                          type: string | null,\r\n                                          text = '',\r\n                                          props = {}) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                type={type}\r\n                {...props}\r\n            />\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type getStringKeys<T> = Extract<keyof T, string>","import React from 'react'\r\n\r\nexport type ValidatorsType = (value: string) => string | undefined\r\n\r\nexport const required: ValidatorsType = (value) => {\r\n  if (value) return undefined\r\n\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator  = (maxLength: number): ValidatorsType => (value) => {\r\n  if (value && value.length > maxLength)\r\n    return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8a9d7844-8f01-425a-adf0-76c5abdfd30b',\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n})\r\n\r\nexport type CustomType = {\r\n    data: { id: number }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n}\r\nexport enum ResultCodeEnum {\r\n    success = 0,\r\n    ERROR = 1,\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, getStringKeys, Textarea} from '../common/FormsControl/FormsControl'\r\nimport {maxLengthCreator, required} from '../../utils/validators'\r\nimport {NewMessageFormType} from \"./Dialogs\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> =\r\n    (props) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                {createField<NewMessageFormKeysType>('Message Text', \"newMessageBody\", Textarea, [required, maxLength100], null)}\r\n                <button>Send</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default reduxForm<NewMessageFormType, PropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\ntype NewMessageFormKeysType = getStringKeys<NewMessageFormType>\r\ntype PropsType = {}","export default __webpack_public_path__ + \"static/media/profile.5faf09a7.png\";","import React, {FC} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport AddMessageForm from './AddMessageForm'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType, MessagesType} from \"../../types/types\";\r\nimport userPhoto from './../../assets/images/profile.png'\r\n\r\n\r\ntype PropsType = {\r\n    dialogsData: Array<DialogType>\r\n    messagesData: Array<MessagesType>\r\n    addMessage: (text: string) => void\r\n}\r\nconst Dialogs: FC<PropsType> = ({messagesData, dialogsData, addMessage}) => {\r\n    let dialogsElement = dialogsData.map((d: DialogsPropsType) => (\r\n        <DialogItem id={d.id} name={d.name} img={d.img} key={d.id}/>\r\n    ))\r\n\r\n    let messagesElements = messagesData.map((m: { message: string }) => (\r\n        <div className={s.message}>{m.message}</div>\r\n    ))\r\n\r\n    let sendMessage = (value: NewMessageFormType) => {\r\n        addMessage(value.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>{dialogsElement}</div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <div className={s.addBlock}>\r\n                    <AddMessageForm onSubmit={sendMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype DialogsPropsType = {\r\n    id: number\r\n    img: string\r\n    name: string\r\n}\r\nconst DialogItem: FC<DialogsPropsType> = ({id, img, name}) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={`/dialogs/${id}`} activeClassName={s.activeLink}>\r\n                <div className={s.item}>\r\n                    <img src={img} alt={userPhoto}/>\r\n                    <div className={s.name}>{name}</div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}","import React, {ComponentType} from 'react'\r\nimport {actions} from '../../redux/dialogsReducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../hoc/WithAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    dialogsData: state.dialogsPage.dialogsData,\r\n    messagesData: state.dialogsPage.messagesData,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        addMessage: actions.addMessage\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","import React from 'react'\r\nimport s from './Preloader.module.css'\r\n\r\nlet Preloader = () => {\r\n  return (\r\n    <img\r\n      className={s.loader}\r\n      src={'https://samherbert.net/svg-loaders/svg-loaders/puff.svg'}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Preloader\r\n","import React, {FC} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport s from './Header.module.css'\r\n\r\ntype PropsType = {\r\n  isFetching: boolean\r\n  isAuth: boolean\r\n\r\n  login: string | null\r\n  userLogOut: () => void\r\n}\r\nconst Header: FC<PropsType> = (props) => {\r\n  return (\r\n    <header className={s.header}>\r\n      {props.isFetching ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={s.loginBlock}>\r\n          {props.isAuth ? (\r\n            <div>\r\n              <div>{props.login}</div>\r\n              <div>\r\n                <NavLink\r\n                  to={'/login'}\r\n                  className={s.login}\r\n                  onClick={() => {\r\n                    props.userLogOut()\r\n                  }}\r\n                >\r\n                  Logout\r\n                </NavLink>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <NavLink to={'/login'}>Login</NavLink>\r\n          )}\r\n        </div>\r\n      )}\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import {CustomType, instance, ResultCodeEnum, ResultCodeForCaptcha} from \"./api\";\r\n\r\n\r\ntype authResponseType = {\r\n    data: { id: number, email: string, login: string }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: { id: number }\r\n    resultCode: ResultCodeEnum | ResultCodeForCaptcha\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    auth() {\r\n        return instance.get<authResponseType>(`auth/me`).then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha,\r\n        }).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<CustomType>(`auth/login`)\r\n    },\r\n}","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<{ url: string }>(`security/get-captcha-url`).then(response => response.data)\r\n    },\r\n}","import {ResultCodeEnum, ResultCodeForCaptcha} from '../api/api'\r\nimport {stopSubmit} from 'redux-form'\r\nimport { DefaultThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {securityAPI} from \"../api/securityAPI\";\r\nimport {Action} from \"redux\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    isFetching: false,\r\n    captchaUrl: null as string | null,\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/auth/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        case 'socialNetwork/auth/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case 'socialNetwork/auth/GET_CAPTCHA':\r\n            return {...state, captchaUrl: action.text}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'socialNetwork/auth/SET_USER_DATA',\r\n        payload: {id, email, login, isAuth},\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'socialNetwork/auth/TOGGLE_IS_FETCHING',\r\n        isFetching,\r\n    } as const),\r\n    getCaptchaUrlSuccess: (text: string) => ({\r\n        type: 'socialNetwork/auth/GET_CAPTCHA',\r\n        text,\r\n    } as const)\r\n}\r\n\r\nexport const authMe = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.auth()\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n        const {id, email, login} = response.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const userLogin =\r\n    (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n        const response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (response.resultCode === ResultCodeEnum.success) {\r\n            dispatch(authMe())\r\n        } else {\r\n            if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            const err =\r\n                response.messages.length > 0\r\n                    ? response.messages[0]\r\n                    : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: err}))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptcha()\r\n    const captchaUrl = response.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const userLogOut = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await authAPI.logout()\r\n        if (response.data.resultCode === ResultCodeEnum.success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false));\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = DefaultThunkType<ActionsTypes >\r\n","import React from 'react'\r\nimport Header from './Header'\r\nimport { connect } from 'react-redux'\r\nimport { userLogOut } from '../../redux/authReducer'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PropsType = {\r\n  isAuth: boolean\r\n  isFetching: boolean\r\n  login: string | null\r\n\r\n  userLogOut: () => void\r\n}\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n  render() {\r\n    return <Header {...this.props} />\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login,\r\n  isFetching: state.auth.isFetching,\r\n})\r\n\r\nexport default connect(mapStateToProps, { userLogOut })(HeaderContainer)\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {compose} from 'redux'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {userLogin} from '../../redux/authReducer'\r\nimport {createField, getStringKeys, Input} from '../common/FormsControl/FormsControl'\r\nimport {required} from '../../utils/validators'\r\nimport {Redirect} from 'react-router'\r\nimport s from './../common/FormsControl/FormsControl.module.css'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> & LoginFormOwnPropsType>\r\n    = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesKeyType>('Email', \"email\", Input, [required], null)}\r\n            {createField<LoginFormValuesKeyType>('Password', 'password', Input, [required], 'password')}\r\n            {createField<LoginFormValuesKeyType>(undefined, 'rememberMe', Input, [], 'checkbox', 'Remember me')}\r\n            {captchaUrl && <img src={captchaUrl} alt={''}/>}\r\n            {captchaUrl &&\r\n            createField<LoginFormValuesKeyType>('Symbols form image', 'captcha', Input, [required], null)}\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({\r\n    form: 'login',\r\n})(LoginForm)\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormValuesType) => {\r\n        props.userLogin(email, password, rememberMe, captcha)\r\n    }\r\n\r\n    return props.isAuth ? (\r\n        <Redirect to={'/profile'}/>\r\n    ) : (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\nexport default compose(connect(mapStateToProps, {userLogin}))(Login)\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string | null\r\n}\r\ntype MapStateToPropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    userLogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesKeyType = getStringKeys<LoginFormValuesType>","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './Navbar.module.css'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={`${s.item}`}>\r\n        <NavLink to=\"/profile\" activeClassName={s.activeLink}>\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div className={`${s.item}`}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\r\n          Messages\r\n        </NavLink>\r\n      </div>\r\n      <div className={`${s.item} ${s.users}`}>\r\n        <NavLink to=\"/users\" activeClassName={s.activeLink}>\r\n          Find Users\r\n        </NavLink>\r\n      </div>\r\n      <div className={`${s.item}`}>\r\n        <NavLink to=\"/settings\" activeClassName={s.activeLink}>\r\n          Settings\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import {PhotosType, ProfileType} from \"../types/types\"\r\nimport {CustomType, instance, ResultCodeEnum} from \"./api\"\r\n\r\n\r\ntype savePhotoType = {\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n}\r\nexport const profileAPI = {\r\n    getProfileInfo(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CustomType>(`profile/status`, {\r\n            status,\r\n        })\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put<savePhotoType>(`profile/photo`, formData, {\r\n            headers: {'Content-Type': 'multipart/form-data'},\r\n        }).then(response => response.data)\r\n    },\r\n    saveData(data: ProfileType) {\r\n        return instance.put<CustomType>(`profile`, data).then(response => response.data)\r\n    },\r\n}","import {stopSubmit} from 'redux-form'\r\nimport {ResultCodeEnum} from '../api/api'\r\nimport {PhotosType, PostDataType, ProfileType} from \"../types/types\";\r\nimport {AppStateType, DefaultThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: 'How are you?'},\r\n        {id: 2, message: \"It's my first post\"},\r\n        {id: 3, message: \"It's my second post\"},\r\n        {id: 4, message: \"It's my 4th post\"},\r\n    ] as Array<PostDataType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    editMode: false,\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/profile/ADD_POST': {\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData,\r\n                    {\r\n                        id: 5,\r\n                        message: action.postText,\r\n                    },\r\n                ],\r\n            }\r\n        }\r\n        case 'socialNetwork/profile/DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                postsData: state.postsData.filter((p) => p.id !== action.postId),\r\n            }\r\n        }\r\n\r\n        case 'socialNetwork/profile/SET_USER_PROFILE':\r\n            return {...state, profile: action.profile}\r\n\r\n        case 'socialNetwork/profile/SET_STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'socialNetwork/profile/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n\r\n        case 'socialNetwork/profile/TOGGLE_EDIT_MODE':\r\n            return {...state, editMode: action.editMode}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPost: (postText: string) => ({type: 'socialNetwork/profile/ADD_POST', postText} as const),\r\n    deletePost: (postId: number) => ({type: 'socialNetwork/profile/DELETE_POST', postId} as const),\r\n    setUserProfile: (profile: ProfileType) => ({\r\n        type: 'socialNetwork/profile/SET_USER_PROFILE',\r\n        profile,\r\n    } as const),\r\n    setStatus: (status: string) => ({\r\n        type: 'socialNetwork/profile/SET_STATUS',\r\n        status,\r\n    } as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'socialNetwork/profile/SAVE_PHOTO_SUCCESS', photos} as const),\r\n    toggleEditMode: (editMode: boolean) => ({\r\n        type: 'socialNetwork/profile/TOGGLE_EDIT_MODE',\r\n        editMode,\r\n    } as const)\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(actions.setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === ResultCodeEnum.success) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getProfileInfo = (userId: number | null): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.getProfileInfo(userId)\r\n        dispatch(actions.setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (photoFile: File): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.savePhoto(photoFile)\r\n        if (response.resultCode === ResultCodeEnum.success) {\r\n            dispatch(actions.savePhotoSuccess(response.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveData = (data: ProfileType) => {\r\n    return async (dispatch: any, getState: () => AppStateType) => {\r\n        const id = getState().auth.id\r\n        const response = await profileAPI.saveData(data)\r\n        if (response.resultCode === ResultCodeEnum.success) {\r\n            dispatch(getProfileInfo(id))\r\n            dispatch(actions.toggleEditMode(false))\r\n        } else {\r\n            dispatch(stopSubmit('profileForm', {_error: response.messages[0]}))\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\ntype ThunkType = DefaultThunkType<ActionsTypes>\r\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\nimport s from './../ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    let deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode && (\r\n                <div>\r\n                    {props.isOwner ?\r\n                        (<span onDoubleClick={activateEditMode}>\r\n                            {props.status || 'NO STATUS'}\r\n                        </span>) : (<span>\r\n                            {props.status || 'NO STATUS'}\r\n                        </span>)\r\n                    }\r\n                </div>\r\n            )}\r\n            {editMode && (\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deActivateEditMode}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus\r\n","import React from 'react'\r\nimport s from './../ProfileInfo.module.css'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, getStringKeys, Input} from '../../../common/FormsControl/FormsControl'\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\ntype EditModeType = {\r\n    profile: ProfileType\r\n    submit: (formName: string) => void\r\n    saveData: (formData: ProfileType) => void\r\n}\r\nconst EditMode: React.FC<EditModeType> = ({profile, submit, saveData}) => {\r\n\r\n    const submitForm = (formData: ProfileType) => {\r\n        saveData(formData)\r\n    }\r\n\r\n    return (\r\n        <div className={s.a0001}>\r\n            <div\r\n                className={s.edit}\r\n                onClick={() => {\r\n                    submit('profileForm')\r\n                }}\r\n            >\r\n                Submit\r\n            </div>\r\n            <EditModeFormRedux\r\n                profile={profile}\r\n                initialValues={profile}\r\n                onSubmit={submitForm}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst EditModeForm: React.FC<InjectedFormProps<ProfileType, ProfileFormOwnPropsType> & ProfileFormOwnPropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.infoBlock}>\r\n            {/* InfoBlock */}\r\n            <div className={s.infoBox}>\r\n                Info\r\n                <div className={s.infoBoxItem}>\r\n                    <span className={s.key}>Full Name: </span>\r\n                    {createField<ProfileFormValuesKeyType>('Full Name', 'fullName', Input, [], null)}\r\n                </div>\r\n                <div className={s.infoBoxItem}>\r\n                    <span className={s.key}>About me: </span>\r\n                    {createField<ProfileFormValuesKeyType>('About me', 'aboutMe', Input, [], null)}\r\n                </div>\r\n                <div className={s.infoBoxItem}>\r\n                    <span className={s.key}>Is Looking For Job: </span>\r\n                    {createField<ProfileFormValuesKeyType>(undefined, 'lookingForAJob', Input, [], 'checkBox')}\r\n                </div>\r\n                <div className={s.infoBoxItem}>\r\n                    <span className={s.key}>Job status: </span>\r\n                    {createField<ProfileFormValuesKeyType>(\r\n                        'Job status',\r\n                        'lookingForAJobDescription',\r\n                        Input,\r\n                        [],\r\n                        null\r\n                    )}\r\n                </div>\r\n            </div>\r\n            {/* InfoBlock */}\r\n            {/* ContactsBlock */}\r\n            <div className={s.infoBox}>\r\n                Contacts\r\n                {Object.keys(profile.contacts).map((key) => {\r\n                    return (\r\n                        <div className={s.contactBoxItem}>\r\n                            <span className={s.key}>{key}: </span>\r\n                            <span className={s.property}>\r\n                {createField(undefined, `contacts.${key}`, Input, [], null)}\r\n              </span>\r\n                            {error && <div className={s.formSummaryError}>{error}</div>}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            {/* ContactsBlock */}\r\n        </form>\r\n    )\r\n}\r\n\r\nconst EditModeFormRedux = reduxForm<ProfileType, ProfileFormOwnPropsType>({\r\n    form: 'profileForm',\r\n})(EditModeForm)\r\n\r\nexport default EditMode\r\n\r\n\r\ntype ProfileFormOwnPropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileFormValuesKeyType = getStringKeys<ProfileType>","import React, {FC} from 'react'\r\nimport s from './../ProfileInfo.module.css'\r\nimport EditMode from './EditMode'\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\ntype ProfileDataType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  editMode: boolean\r\n\r\n  submit: () => void\r\n  saveData: () => void\r\n  toggleEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataType> = (props) => {\r\n  return (\r\n    <>\r\n      {props.editMode ? (\r\n        <EditMode {...props} />\r\n      ) : (\r\n        <StaticProfileData {...props} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\ntype StaticProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  toggleEditMode: (arg: boolean) => void\r\n}\r\nconst StaticProfileData: FC<StaticProfileDataPropsType>= ({ profile, toggleEditMode, isOwner }) => {\r\n  return (\r\n    <div className={s.a0001}>\r\n      {isOwner && (\r\n        <div\r\n          className={s.edit}\r\n          onClick={() => {\r\n            toggleEditMode(true)\r\n          }}\r\n        >\r\n          Edit Details\r\n        </div>\r\n      )}\r\n      <div className={s.infoBlock}>\r\n        {/* InfoBlock */}\r\n        <div className={s.infoBox}>\r\n          Info\r\n          <div className={s.infoBoxItem}>\r\n            <span className={s.key}>Full Name:</span>\r\n            <span className={s.propertyString}> {profile.fullName}</span>\r\n          </div>\r\n          <div className={s.infoBoxItem}>\r\n            <span className={s.key}>About me:</span>\r\n            <span className={s.propertyString}> {profile.aboutMe}</span>\r\n          </div>\r\n          <div className={s.infoBoxItem}>\r\n            <span className={s.key}>Is Looking For Job:</span>\r\n            {profile.lookingForAJob ? (\r\n              <span className={s.property}> Yes</span>\r\n            ) : (\r\n              <span className={s.property}> No</span>\r\n            )}\r\n          </div>\r\n          <div className={s.infoBoxItem}>\r\n            <span className={s.key}>Job status:</span>\r\n            <span className={s.propertyString}>\r\n              {' '}\r\n              {profile.lookingForAJobDescription}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        {/* InfoBlock */}\r\n        {/* ContactsBlock */}\r\n        <div className={s.infoBox}>\r\n          Contacts\r\n          {Object.keys(profile.contacts).map((key) => {\r\n            return (\r\n                <Contacts\r\n                    contactTitle={key}\r\n                    // @ts-ignore\r\n                    contactValue={profile.contacts[key]}\r\n                />\r\n            );\r\n          })}\r\n        </div>\r\n        {/* ContactsBlock */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\nconst Contacts: FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contactBoxItem}>\r\n      <span className={s.key}>{contactTitle}:</span>\r\n      <span className={s.property}> {contactValue}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileData\r\n","import React, {ChangeEvent, FC} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus'\r\nimport profilePhoto from './../../../assets/images/profile.png'\r\nimport ProfileData from './ProfileData/ProfileData'\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    editMode: boolean\r\n\r\n    submit: () => void\r\n    saveData: () => void\r\n    toggleEditMode: () => void\r\n    savePhoto: (file: File) => void\r\n    updateStatus: () => void\r\n}\r\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, toggleEditMode, editMode, saveData, submit}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.description}>\r\n            <div className={s.imgBox}>\r\n                <img className={s.ava} src={profile.photos.large || profilePhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n            <div>\r\n                <div className={s.name}>{profile.fullName}</div>\r\n                <ProfileStatus\r\n                    isOwner={isOwner}\r\n                    status={status}\r\n                    updateStatus={updateStatus}\r\n                />\r\n                <ProfileData\r\n                    profile={profile}\r\n                    toggleEditMode={toggleEditMode}\r\n                    isOwner={isOwner}\r\n                    editMode={editMode}\r\n                    saveData={saveData}\r\n                    submit={submit}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n","import React, {FC} from 'react'\r\nimport s from './Post.module.css'\r\nimport profileDefault from './../../../../assets/images/profile.png'\r\n\r\ntype PropsType = {\r\n    img: string | null\r\n    message: string\r\n}\r\nconst Post: FC<PropsType> = ({img, message}) => {\r\n  return (\r\n    <div className={s.itemBox}>\r\n      <div className={s.itemContent}>\r\n        <div className={s.imgBox}>\r\n          <img src={img || profileDefault} />\r\n        </div>\r\n        <div className={s.text}>{message}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {maxLengthCreator} from '../../../utils/validators'\r\nimport {createField, getStringKeys, Textarea} from '../../common/FormsControl/FormsControl'\r\n\r\nconst maxLength70 = maxLengthCreator(70)\r\n\r\nconst MyPostForm: React.FC<InjectedFormProps<NewPostFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewPostKeysType>('New Post Text', 'postText', Textarea, [maxLength70], null)}\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostReduxForm = reduxForm<NewPostFormType, PropsType>({\r\n    form: 'login',\r\n})(MyPostForm)\r\n\r\ntype PostsFormType = {\r\n    addPost: (postText: string) => void\r\n}\r\nconst PostsForm: React.FC<PostsFormType> = (props) => {\r\n\r\n    const onSubmit = (formData: NewPostFormType) => {\r\n        props.addPost(formData.postText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MyPostReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsForm\r\n\r\ntype PropsType = {}\r\ntype NewPostFormType = {\r\n    postText: string\r\n}\r\ntype NewPostKeysType = getStringKeys<NewPostFormType>","import React, {FC} from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostsForm from './MyPostsForm'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PostsDataType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    postsData: Array<PostsDataType>\r\n    addPost: (postText: string) => void\r\n}\r\nconst MyPosts: FC<PropsType> = React.memo(({profile, postsData, addPost}) => {\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n  return (\r\n    <div className={s.postBlock}>\r\n      <h3>My posts</h3>\r\n      <div className={s.posts}>\r\n        {postsData.map((elem) => {\r\n          return (\r\n            <Post\r\n              message={elem.message}\r\n              key={elem.id}\r\n              img={profile.photos.large}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n      <div>\r\n        <MyPostsForm addPost={addPost} />\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default MyPosts\r\n","import React, {ComponentType} from 'react'\r\nimport {\r\n    getProfileInfo,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    actions,\r\n    saveData,\r\n} from '../../redux/profileReducer'\r\nimport {connect} from 'react-redux'\r\nimport {withRouter} from 'react-router'\r\nimport {withAuthRedirect} from '../../hoc/WithAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport {submit} from 'redux-form'\r\nimport {AppStateType} from \"../../redux/reduxStore\"\r\nimport {PostDataType, ProfileType} from \"../../types/types\"\r\nimport MyPosts from \"./MyPosts/MyPosts\"\r\nimport {RouteComponentProps} from \"react-router-dom\"\r\n\r\ntype PropsType = {\r\n    match: any\r\n    authorizedUserId: number\r\n    profile: ProfileType\r\n    status: string\r\n    editMode: boolean\r\n    postsData: Array<PostDataType>\r\n\r\n    submit: () => void\r\n    saveData: () => void\r\n    toggleEditMode: () => void\r\n    savePhoto: (file: File) => void\r\n    updateStatus: () => void\r\n    getProfileInfo: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    addPost: (postText: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass Profile extends React.Component<PropsType & RouteComponentProps<PathParamsType>> {\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getProfileInfo(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ProfileInfo\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                />\r\n                <MyPosts\r\n                    profile={this.props.profile}\r\n                    addPost={this.props.addPost}\r\n                    postsData={this.props.postsData}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    editMode: state.profilePage.editMode,\r\n    postsData: state.profilePage.postsData,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        submit,\r\n        getProfileInfo,\r\n        savePhoto,\r\n        getStatus,\r\n        updateStatus,\r\n        saveData,\r\n        toggleEditMode: actions.toggleEditMode,\r\n        addPost: actions.addPost\r\n    })\r\n)(Profile)\r\n","export const updateObjectInArray = (\r\n  items: any,\r\n  itemId: any,\r\n  objPropsName: any,\r\n  newObjProps: any\r\n) => {\r\n  return items.map((u: any) => {\r\n    if (u[objPropsName] === itemId) {\r\n      return { ...u, ...newObjProps }\r\n    }\r\n    return u\r\n  })\r\n}\r\n","import {CustomType, instance} from \"./api\"\r\n\r\n\r\ntype UsersType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {small: string, large: string}\r\n    followed: boolean\r\n}\r\ntype getUsersType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance\r\n            .get<getUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response) => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<CustomType>(`follow/${id}`)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<CustomType>(`follow/${id}`, {})\r\n    },\r\n}","import {ResultCodeEnum} from '../api/api'\r\nimport {updateObjectInArray} from '../utils/object-helpers'\r\nimport {UserType} from \"../types/types\";\r\nimport { DefaultThunkType, InferActionTypes} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 13,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, //array of usersId\r\n    portionSize: 10,\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/users/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {\r\n                    followed: true,\r\n                }),\r\n            }\r\n        case 'socialNetwork/users/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {\r\n                    followed: false,\r\n                }),\r\n            }\r\n        case 'socialNetwork/users/SET_USERS':\r\n            return {...state, users: action.users}\r\n\r\n        case 'socialNetwork/users/SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n\r\n        case 'socialNetwork/users/SET_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.totalUsers}\r\n\r\n        case 'socialNetwork/users/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case 'socialNetwork/users/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id) => id != action.userId),\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: 'socialNetwork/users/FOLLOW',\r\n        userId,\r\n    } as const ),\r\n    unfollowSuccess: (userId: number) => ({\r\n        type: 'socialNetwork/users/UNFOLLOW',\r\n        userId,\r\n    } as const),\r\n    setUsers: (users: Array<UserType>) => ({\r\n        type: 'socialNetwork/users/SET_USERS',\r\n        users,\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'socialNetwork/users/SET_CURRENT_PAGE',\r\n        currentPage,\r\n    } as const),\r\n    setTotalUsersCount: (totalUsers: number) => ({\r\n        type: 'socialNetwork/users/SET_USERS_COUNT',\r\n        totalUsers,\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'socialNetwork/users/TOGGLE_IS_FETCHING',\r\n        isFetching,\r\n    } as const),\r\n    toggleIsFollowingProgress: (followingInProgress: boolean, userId: number) => ({\r\n        type: 'socialNetwork/users/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        userId,\r\n    } as const)\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleIsFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === ResultCodeEnum.success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(\r\n            dispatch,\r\n            userId,\r\n            usersAPI.follow.bind(userId),\r\n            actions.followSuccess\r\n        )\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(\r\n            dispatch,\r\n            userId,\r\n            usersAPI.unfollow.bind(userId),\r\n            actions.unfollowSuccess\r\n        )\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = DefaultThunkType<ActionsTypes>\r\ntype InitialStateType = typeof initialState\r\n","import React from 'react'\r\nimport styles from './Pagination.module.css'\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  onPageChanged: (currentPage: number ) => void\r\n}\r\n\r\nlet Pagination: React.FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  currentPage,\r\n  onPageChanged,\r\n}) => {\r\n  let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n  let before: number   = currentPage - 1\r\n  before = before < 1 ? 1 : before\r\n  let after: number  = currentPage + 1\r\n  after = after >= pagesCount ? pagesCount : after\r\n\r\n  return (\r\n    <div className={styles.paginator}>\r\n      {/* pagination */}\r\n      {/* first page */}\r\n      <div>\r\n        {currentPage === 1 ? null : (\r\n          <>\r\n            <span\r\n              onClick={() => {\r\n                onPageChanged(1)\r\n              }}\r\n            >\r\n              {1}\r\n            </span>\r\n            <span>...</span>\r\n          </>\r\n        )}\r\n\r\n        {/* first page */}\r\n        {/* before current page */}\r\n        <span\r\n          onClick={() => {\r\n            onPageChanged(before)\r\n          }}\r\n        >\r\n          {currentPage < 3 ? null : <span>{before}</span>}\r\n        </span>\r\n        {/* before current page */}\r\n        {/* current page */}\r\n        <span>\r\n          {currentPage < 3 ? null : <span>..</span>}\r\n          <span className={styles.selectedPage}>{currentPage}</span>\r\n          {currentPage > pagesCount - 2 ? null : <span>..</span>}\r\n        </span>\r\n        {/* current page */}\r\n        {/* after current page */}\r\n        {after === pagesCount ? null : (\r\n          <>\r\n            <span\r\n              onClick={() => {\r\n                onPageChanged(after)\r\n              }}\r\n            >\r\n              {after}\r\n            </span>\r\n          </>\r\n        )\r\n}\r\n\r\n        {/* after current page */}\r\n        {/* last page */}\r\n        {currentPage === pagesCount ? null : (\r\n          <>\r\n            <span>...</span>\r\n            <span\r\n              onClick={() => {\r\n                onPageChanged(pagesCount)\r\n              }}\r\n            >\r\n              {pagesCount}\r\n            </span>\r\n          </>\r\n        )}\r\n        {/* last page */}\r\n      </div>\r\n      {/* pagination */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport styles from './Users.module.css'\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    isAuth: boolean\r\n}\r\nlet User: FC<PropsType> = ({user, followingInProgress, unfollow, follow, isAuth}) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <NavLink to={`/profile/${user.id}`}>\r\n                    <img\r\n                        src={\r\n                            user.photos.small != null\r\n                                ? user.photos.small\r\n                                : 'https://www.pavilionweb.com/wp-content/uploads/2017/03/man-300x300.png'\r\n                        }\r\n                        className={styles.userPhoto}\r\n                    />\r\n                </NavLink>\r\n            </div>\r\n            {isAuth && (\r\n                <div>\r\n                    {user.followed ? (\r\n                        <button\r\n                            disabled={followingInProgress.some((id) => id === user.id)}\r\n                            onClick={() => {\r\n                                unfollow(user.id)\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            disabled={followingInProgress.some((id) => id === user.id)}\r\n                            onClick={() => {\r\n                                follow(user.id)\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\r\nimport Pagination from '../common/Pagination/Pagination'\r\nimport User from './User'\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PorpsType = {\r\n  currentPage: number\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  onPageChanged: (currentPage: number ) => void\r\n  users: Array<UserType>\r\n  isAuth: boolean\r\n  followingInProgress: Array<number>\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n}\r\nlet Users: React.FC<PorpsType> = ({\r\n  currentPage,\r\n  totalUsersCount,\r\n  pageSize,\r\n  onPageChanged,\r\n  users,\r\n  isAuth,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n      {users.map((u) => (\r\n        <User\r\n          user={u}\r\n          key={u.id}\r\n          followingInProgress={props.followingInProgress}\r\n          unfollow={props.unfollow}\r\n          follow={props.follow}\r\n          isAuth={isAuth}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Users\r\n","import { createSelector } from 'reselect'\r\nimport {AppStateType} from \"./reduxStore\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsersData = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\nexport const getPortionSize = (state: AppStateType) => {\r\n  return state.usersPage.portionSize\r\n}\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n  return state.auth.isAuth\r\n}\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    actions,\r\n    getUsers,\r\n} from '../../redux/usersReducer'\r\nimport Users from './Users'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {compose} from 'redux'\r\nimport {\r\n    getIsFetching,\r\n    getPageSize,\r\n    getUsersData,\r\n    getTotalUsersCount,\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPortionSize,\r\n    getIsAuth,\r\n} from '../../redux/usersSelectors'\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {UserType} from \"../../types/types\";\r\n// import { withAuthRedirect } from './../../hoc/WithAuthRedirect'\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (currentPage: number) => {\r\n        this.props.setCurrentPage(currentPage)\r\n        this.props.getUsers(currentPage, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? (\r\n                    <Preloader/>\r\n                ) : (\r\n                    <Users\r\n                        totalUsersCount={this.props.totalUsersCount}\r\n                        pageSize={this.props.pageSize}\r\n                        currentPage={this.props.currentPage}\r\n                        onPageChanged={this.onPageChanged}\r\n                        users={this.props.users}\r\n                        follow={this.props.follow}\r\n                        unfollow={this.props.unfollow}\r\n                        followingInProgress={this.props.followingInProgress}\r\n                        isAuth={this.props.isAuth}\r\n                    />\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    users: getUsersData(state),\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n    portionSize: getPortionSize(state),\r\n    isAuth: getIsAuth(state),\r\n})\r\n\r\nlet mapDispatchToProps = (dispatch: any) => ({\r\n    follow: (userId: number) => dispatch(follow(userId)),\r\n    unfollow: (userId: number) => dispatch(unfollow(userId)),\r\n    getUsers: (currentPage: number, pageSize: number) => dispatch(getUsers(currentPage, pageSize)),\r\n    setCurrentPage: (currentPage: number) => dispatch(actions.setCurrentPage(currentPage))\r\n\r\n})\r\n\r\nexport default compose(\r\n    // withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(UsersContainer)\r\n","import {authMe} from './authReducer'\r\nimport { InferActionTypes} from \"./reduxStore\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'socialNetwork/app/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'socialNetwork/app/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(authMe())\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(actions.initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n// type ThunkType = DefaultThunkType<ActionsType>","import {Action, applyMiddleware, combineReducers, compose, createStore} from 'redux'\r\nimport authReducer from './authReducer'\r\nimport dialogsReducer from './dialogsReducer'\r\nimport profileReducer from './profileReducer'\r\nimport usersReducer from './usersReducer'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './appReducer'\r\n\r\nlet rootReducer = combineReducers({\r\n  dialogsPage: dialogsReducer,\r\n  profilePage: profileReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n})\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionTypes<T> = T extends  {[key: string]:  (...args: any[]) => infer U} ? U : never\r\n\r\nexport type DefaultThunkType<A extends Action> = ThunkAction<Promise<void>, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n)\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store\r\n","import React, {ComponentType, Suspense} from 'react'\r\nimport Preloader from '../components/common/Preloader/Preloader'\r\n\r\nexport function LazyLoading<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <>\r\n        <Suspense fallback={<Preloader />}>\r\n          <WrappedComponent {...props} />\r\n        </Suspense>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LazyLoading\r\n","import React, {ComponentType} from 'react'\nimport {Component} from 'react'\nimport {HashRouter, Redirect, Route, withRouter} from 'react-router-dom'\nimport './App.css'\nimport DialogsContainer from './components/Dialogs/DialogsContainer'\nimport HeaderContainer from './components/Header/HeaderContainer'\nimport Login from './components/Login/Login'\nimport Navbar from './components/Navbar/Navbar'\nimport Profile from './components/Profile/ProfileContainer'\nimport UsersContainer from './components/Users/UsersContainer'\nimport {connect} from 'react-redux'\nimport {compose} from 'redux'\nimport {initializeApp} from './redux/appReducer'\nimport Preloader from './components/common/Preloader/Preloader'\nimport store, {AppStateType} from './redux/reduxStore'\nimport {Provider} from 'react-redux'\nimport LazyLoading from './hoc/LazyLoading'\n\nconst SettingsContainer = React.lazy(() => import('./components/Settings/Settings'))\nconst LazySettings = LazyLoading(SettingsContainer)\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occured')\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\n            'unhandledrejection',\n            this.catchAllUnhandledErrors\n        )\n    }\n\n    render() {\n        if (!this.props.initialized) return <Preloader/>\n\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <div className=\"all-info-page\">\n                    <Navbar/>\n                    <div className=\"contextBox\">\n                        <Route exact path=\"/\" render={() => <Redirect to={'/profile'}/>}/>\n                        <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                        <Route path=\"/profile/:userId?\" render={() => <Profile/>}/>\n                        <Route path=\"/settings\" render={() => <LazySettings /> }/>\n                        <Route path=\"/users\" render={() => <UsersContainer pageTitle={'Samurai'}/>}/>\n                        <Route path=\"/login\" render={() => <Login/>}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})\n)(App)\n\nconst SamuraiJSApp: React.FC = () => {\n    return (\n        <React.StrictMode>\n            <HashRouter>\n                <Provider store={store}>\n                    <AppContainer/>\n                </Provider>\n            </HashRouter>\n        </React.StrictMode>\n    )\n}\n\nexport default SamuraiJSApp\n","import reportWebVitals from './reportWebVitals'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport SamuraiJSApp from './App'\n\nReactDOM.render(<SamuraiJSApp />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__3c4w2\",\"err\":\"FormsControl_err__A2dut\",\"formSummaryError\":\"FormsControl_formSummaryError__JSrAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemBox\":\"Post_itemBox__2J8Mx\",\"itemContent\":\"Post_itemContent__qLEcN\",\"imgBox\":\"Post_imgBox__3E9VG\",\"text\":\"Post_text__1Gw6X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__dIfKa\",\"imgBox\":\"ProfileInfo_imgBox__10WHV\",\"ava\":\"ProfileInfo_ava__3A2Or\",\"name\":\"ProfileInfo_name__3J0j-\",\"status\":\"ProfileInfo_status__3QP5Y\",\"a0001\":\"ProfileInfo_a0001__IGcPV\",\"edit\":\"ProfileInfo_edit__1JZbG\",\"infoBlock\":\"ProfileInfo_infoBlock__te5So\",\"infoBox\":\"ProfileInfo_infoBox__14u83\",\"infoBoxItem\":\"ProfileInfo_infoBoxItem__2Tu06\",\"contactBoxItem\":\"ProfileInfo_contactBoxItem__1Hxns\",\"key\":\"ProfileInfo_key__12JgN\",\"property\":\"ProfileInfo_property__7YOSF\",\"propertyString\":\"ProfileInfo_propertyString__3VxKN\",\"formSummaryError\":\"ProfileInfo_formSummaryError__ZtFVp\"};","import React, {ComponentType} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router'\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props)  => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>\r\n    (mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1aDUx\",\"loginBlock\":\"Header_loginBlock__3SCHH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__15PaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagination_selectedPage__2ynfE\",\"paginator\":\"Pagination_paginator__1DnLe\",\"pageNumber\":\"Pagination_pageNumber__1D9IR\"};"],"sourceRoot":""}