{"version":3,"sources":["pages/Chat/Chat.module.css","pages/Chat/Chat.tsx"],"names":["module","exports","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","useState","isAutoScroll","setAutoScroll","messages","messagesAnchorRef","useRef","current","scrollIntoView","behavior","className","style","messagesContainer","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","photo","userName","message","id","ref","React","memo","messageBlock","src","setMessage","onChange","value","onClick","sendChatMessage","disabled","ChatPage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,aAAe,2BAA2B,kBAAoB,kC,+GCY1EC,EAAiB,WAEnB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OARAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAGI,gCACS,UAAXN,GAAsB,2EACvB,qCACI,cAACO,EAAD,IACA,cAACC,EAAD,WAMND,EAAqB,WAAO,IAAD,EAESE,oBAAkB,GAF3B,mBAEtBC,EAFsB,KAERC,EAFQ,KAGvBC,EAAWX,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKS,YAC3DC,EAAoBC,iBAAuB,MAiBjD,OANAV,qBAAU,WACa,IAAD,EAAdM,IACA,UAAAG,EAAkBE,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACL,IAEG,sBAAKM,UAAWC,IAAMC,kBAAmBC,SAf1B,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EnB,GAAgBC,GAAc,GAE/BD,GAAgBC,GAAc,IAU/B,UAEFC,EAASkB,KAAI,SAACC,GAAD,OACV,cAACC,EAAD,CAEIC,MAAOF,EAAEE,MACTC,SAAUH,EAAEG,SACZC,QAASJ,EAAEI,SAHNJ,EAAEK,OAKf,qBAAKC,IAAKxB,QASZmB,EAAiCM,IAAMC,MAAK,YAAiC,IAA/BN,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QACjE,OAAO,sBAAKjB,UAAWC,IAAMqB,aAAtB,UACH,8BACI,qBAAKC,IAAKR,MAEd,gCACI,8BAAMC,IACN,8BAAMC,aAMZ3B,EAA2B,WAAO,IAAD,EAELC,mBAAS,IAFJ,mBAE5B0B,EAF4B,KAEnBO,EAFmB,KAG7B1C,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAEzDF,EAAWC,cAQjB,OAAO,gCACH,8BACI,0BAAU4C,SAAU,SAACrB,GAAD,OAAOoB,EAAWpB,EAAEE,cAAcoB,QAAQA,MAAOT,MAEzE,8BACI,wBAAQU,QAXI,WACXV,IACLrC,EAASgD,YAAgBX,IACzBO,EAAW,MAQuBK,SAAqB,UAAX/C,EAAxC,wBAKGgD,UAzGY,WACvB,OAAO,8BACH,cAACnD,EAAD","file":"static/js/3.2bb9cb81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageBlock\":\"Chat_messageBlock__SbiPy\",\"messagesContainer\":\"Chat_messagesContainer__t6XAb\"};","import React, {useEffect, useRef, useState} from \"react\";\r\nimport style from './Chat.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendChatMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chatReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occurred.Please refresh page.</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </>\r\n    </div>\r\n}\r\n\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const [isAutoScroll, setAutoScroll] = useState<boolean>(true)\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div className={style.messagesContainer} onScroll={scrollHandler}>\r\n\r\n        {messages.map((m) =>\r\n            <Message\r\n                key={m.id}\r\n                photo={m.photo}\r\n                userName={m.userName}\r\n                message={m.message}\r\n            />)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\ntype MessageType = {\r\n    photo: string,\r\n    userName: string,\r\n    message: string\r\n}\r\nconst Message: React.FC<MessageType> = React.memo(({photo, userName, message}) => {\r\n    return <div className={style.messageBlock}>\r\n        <div>\r\n            <img src={photo}/>\r\n        </div>\r\n        <div>\r\n            <div>{userName}</div>\r\n            <div>{message}</div>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessage = () => {\r\n        if (!message) return\r\n        dispatch(sendChatMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}/>\r\n        </div>\r\n        <div>\r\n            <button onClick={sendMessage} disabled={status !== 'ready'}>send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}